rm(list = ls())
source("scripts/load_paths.R")
all_survey_data <- read.csv("data/all_survey_data.csv")[-1,] %>%
mutate(names = ifelse(Name.of.your.organization.=="SMEP M&E" |
Name.of.your.organization.=="State Ministry of Health (SMEP)" ,
"State Malaria Elimination Program (SMOH)",
ifelse(Name.of.your.organization.=="Management Sciences for Health"|
Name.of.your.organization.=="PATH/MACEPA"|
Name.of.your.organization.=="PMI Evolve Project", "Implementing Partners",
Name.of.your.organization.)))
responses <- read.csv( "data/openeded.csv")
data <- tibble(Response = responses$openended)
data <- data %>%
# Sentiment analysis using TextBlob lexicon in R
# Get detailed sentiment data
# Average polarity for each response
mutate(Sentiment_Details = map(Response, ~ sentimentr::sentiment(.x)),
Polarity = map_dbl(Sentiment_Details, ~ mean(.x$sentiment))) %>%
mutate(Sentiment = case_when(
Polarity > 0 ~ "Positive",
Polarity < 0 ~ "Negative",
TRUE ~ "Neutral"
))
data
responses
names(responses)
data <- data %>%
# Sentiment analysis using TextBlob lexicon in R
# Get detailed sentiment data
# Average polarity for each response
mutate(Sentiment_Details = map(Response, ~ sentimentr::sentiment(.x)),
Sentiment_Details_s = map(Response, ~ syuzhet::sentiment(get_sentiment(.x))),
Polarity = map_dbl(Sentiment_Details, ~ mean(.x$sentiment)))
data <- data %>%
# Sentiment analysis using TextBlob lexicon in R
# Get detailed sentiment data
# Average polarity for each response
mutate(Sentiment_Details = map(Response, ~ sentimentr::sentiment(.x)),
Sentiment_Details_s = map(Response, ~ get_sentiment(.x)),
Polarity = map_dbl(Sentiment_Details, ~ mean(.x$sentiment)))
data
data$Sentiment_Details_s
data <- data %>%
# Sentiment analysis using TextBlob lexicon in R
# Get detailed sentiment data
# Average polarity for each response
mutate(Sentiment_Details = map(Response, ~ sentimentr::sentiment(.x)),
Sentiment_Details_s = map(Response, ~ unlist(get_sentiment(.x))),
Polarity = map_dbl(Sentiment_Details, ~ mean(.x$sentiment)))
data
data <- tibble(Response = responses$openended)
data <- data %>%
# Sentiment analysis using TextBlob lexicon in R
# Get detailed sentiment data
# Average polarity for each response
mutate(Sentiment_Details = map(Response, ~ sentimentr::sentiment(.x)),
Sentiment_Details_s = map(Response, ~ unlist(get_sentiment(.x))),
Polarity = map_dbl(Sentiment_Details, ~ mean(.x$sentiment)))
data
data <- data %>%
# Sentiment analysis using TextBlob lexicon in R
# Get detailed sentiment data
# Average polarity for each response
mutate(Sentiment_Details = map(Response, ~ sentimentr::sentiment(.x)),
Sentiment_Details_s = map(Response, ~ sapply(seq_along(Response), function(i) get_sentiment(.x)[[i]])),
Polarity = map_dbl(Sentiment_Details, ~ mean(.x$sentiment)))
data <- data %>%
# Sentiment analysis using TextBlob lexicon in R
# Get detailed sentiment data
# Average polarity for each response
mutate(Sentiment_Details = map(Response, ~ sentimentr::sentiment(.x)),
Sentiment_Details_s = unlist(map(Response, ~ get_sentiment(.x))),
Polarity = map_dbl(Sentiment_Details, ~ mean(.x$sentiment)))
data <- data %>%
data
data <- data %>%
# Sentiment analysis using TextBlob lexicon in R
# Get detailed sentiment data
# Average polarity for each response
mutate(Sentiment_Details = map(Response, ~ sentimentr::sentiment(.x)),
# Sentiment_Details_s = unlist(map(Response, ~ get_sentiment(.x))),
Polarity = map_dbl(Sentiment_Details, ~ mean(.x$sentiment)))
data
data <- tibble(Response = responses$openended)
data <- data %>%
# Sentiment analysis using TextBlob lexicon in R
# Get detailed sentiment data
# Average polarity for each response
mutate(Sentiment_Details = map(Response, ~ sentimentr::sentiment(.x)),
# Sentiment_Details_s = unlist(map(Response, ~ get_sentiment(.x))),
Polarity = map_dbl(Sentiment_Details, ~ mean(.x$sentiment)))
data
data$Sentiment_Details
data <- data %>%
# Sentiment analysis using TextBlob lexicon in R
# Get detailed sentiment data
# Average polarity for each response
mutate(Sentiment_Details = map(Response, ~ sentimentr::sentiment(.x)),
Sentiment_Details_s = (map(Response, ~ get_sentiment(.x))),
Polarity = map_dbl(Sentiment_Details, ~ mean(.x$sentiment)))
data$Sentiment_Details_s
data <- data %>%
# Sentiment analysis using TextBlob lexicon in R
# Get detailed sentiment data
# Average polarity for each response
mutate(Sentiment_Details = map(Response, ~ sentimentr::sentiment(.x)),
Sentiment_Details_s = unlist(map(Response, ~ get_sentiment(.x))),
Polarity = map_dbl(Sentiment_Details, ~ mean(.x$sentiment)))
data
data <- data %>%
# Sentiment analysis using TextBlob lexicon in R
# Get detailed sentiment data
# Average polarity for each response
mutate(Sentiment_Details = map(Response, ~ sentimentr::sentiment(.x)),
Sentiment_Details_s = unlist(map(Response, ~ get_sentiment(.x))),
Polarity = map_dbl(Sentiment_Details, ~ mean(.x$sentiment))) %>%
mutate(Sentiment = case_when(
Polarity > 0 ~ "Positive",
Polarity < 0 ~ "Negative",
TRUE ~ "Neutral"
),
Syuzhet = case_when(
Sentiment_Details_s > 0 ~ "Positive",
Sentiment_Details_s < 0 ~ "Negative",
TRUE ~ "Neutral"
))
data
ggplot(data, aes(x = Sentiment, fill = Sentiment)) +
# Sentiment distribution plot
geom_bar() +
labs(title = "Sentiment Distribution of Survey Responses",
x = "Sentiment", y = "Count") +
theme_manuscript()
ggplot(data, aes(x = Sentiment, fill = Syuzhet)) +
# Sentiment distribution plot
geom_bar() +
labs(title = "Sentiment Distribution of Survey Responses",
x = "Sentiment", y = "Count") +
theme_manuscript()
table(data$Syuzhet)
ggplot(data, aes(x = Syuzhet, fill = Syuzhet)) +
# Sentiment distribution plot
geom_bar() +
labs(title = "Sentiment Distribution of Survey Responses",
x = "Sentiment", y = "Count") +
theme_manuscript()
source("C:/Users/laure/Documents/urban_malaria/MRMT/analysis_scripts/scripts/publish_manual.R")
# Define paths
manual_file <- "../docs/index.qmd"
source("C:/Users/laure/Documents/urban_malaria/MRMT/analysis_scripts/scripts/publish_manual.R")
# Push changes to GitHub
system("git add ../docs/index.html docs/index.pdf -f")
# Push changes to GitHub
system("git add ../docs/index.html ../docs/index.pdf -f")
system("git commit -m 'Updated user manual' ")
system("git push origin main")
